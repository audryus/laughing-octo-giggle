// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
insert into players (
    user_id, name, color
) values (
    ?, ?, ?
)
returning id, user_id, name, best_score, color
`

type CreatePlayerParams struct {
	UserID int64
	Name   string
	Color  int64
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.UserID, arg.Name, arg.Color)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.BestScore,
		&i.Color,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users(
    username, password_hash
) values (
    ?, ?
) 
returning id, username, password_hash
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const getPlayerByName = `-- name: GetPlayerByName :one
select id, user_id, name, best_score, color from players
where name LIKE ? 
limit 1
`

func (q *Queries) GetPlayerByName(ctx context.Context, name string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByName, name)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.BestScore,
		&i.Color,
	)
	return i, err
}

const getPlayerByUserId = `-- name: GetPlayerByUserId :one
select id, user_id, name, best_score, color from players
where user_id = ? limit 1
`

func (q *Queries) GetPlayerByUserId(ctx context.Context, userID int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByUserId, userID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.BestScore,
		&i.Color,
	)
	return i, err
}

const getPlayerRank = `-- name: GetPlayerRank :one
select count(*) + 1 as "rank" from players 
where best_score >= (
    select best_score from players p2
    where p2.id = ?
)
`

func (q *Queries) GetPlayerRank(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPlayerRank, id)
	var rank int64
	err := row.Scan(&rank)
	return rank, err
}

const getTopScores = `-- name: GetTopScores :many
select name, best_score
from players
order by best_score DESC
limit ?
OFFSET ?
`

type GetTopScoresParams struct {
	Limit  int64
	Offset int64
}

type GetTopScoresRow struct {
	Name      string
	BestScore int64
}

func (q *Queries) GetTopScores(ctx context.Context, arg GetTopScoresParams) ([]GetTopScoresRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopScores, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopScoresRow
	for rows.Next() {
		var i GetTopScoresRow
		if err := rows.Scan(&i.Name, &i.BestScore); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, username, password_hash from users 
where username = ? limit 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const updatePlayerBestScore = `-- name: UpdatePlayerBestScore :exec
update players
set best_score = ?
where id = ?
`

type UpdatePlayerBestScoreParams struct {
	BestScore int64
	ID        int64
}

func (q *Queries) UpdatePlayerBestScore(ctx context.Context, arg UpdatePlayerBestScoreParams) error {
	_, err := q.db.ExecContext(ctx, updatePlayerBestScore, arg.BestScore, arg.ID)
	return err
}
